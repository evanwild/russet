const Russet={canvas:null,context:null,world:null,camera:null,width:0,height:0,prevTime:0,init:function(){document.body.style.margin="0px",this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("2d"),this.handleResize(),window.addEventListener("resize",(()=>this.handleResize())),document.body.appendChild(this.canvas),this.tick()},handleResize:function(){this.width=window.innerWidth,this.height=window.innerHeight;const t=window.devicePixelRatio||1;this.canvas.width=this.width*t,this.canvas.height=this.height*t,this.canvas.style.width=`${this.width}px`,this.canvas.style.height=`${this.height}px`,this.context.scale(t,t)},tick:function(){if(!this.world)return void window.requestAnimationFrame((()=>this.tick()));if(!this.camera)return void window.requestAnimationFrame((()=>this.tick()));if("function"==typeof onTick){const t=(performance.now()-this.prevTime)/1e3;onTick(t)}this.context.fillStyle=this.world.color,this.context.fillRect(0,0,this.width,this.height);const t=Math.max(this.width/this.camera.maxWidth,this.height/this.camera.maxHeight);this.world.children.forEach((i=>{this.drawChild(i,t)})),this.prevTime=performance.now(),window.requestAnimationFrame((()=>this.tick()))},drawChild:function(t,i){const e=t.constructor.name;if("Rect"===e)this.drawRect(t,i);else if("Circle"===e)this.drawCircle(t,i);else{if("Line"!==e)throw"Unknown shape type in the active world";this.drawLine(t,i)}},drawRect:function(t,i){const e=(t.x-this.camera.x)*i+this.width/2,h=(t.y-this.camera.y)*i+this.height/2,s=t.width*i,n=t.height*i;this.context.beginPath(),this.context.rect(e,h,s,n),t.fill&&(this.context.fillStyle=t.fill,this.context.fill()),t.strokeWidth&&(this.context.strokeStyle=t.stroke,this.context.lineWidth=t.strokeWidth*i,this.context.stroke())},drawCircle:function(t,i){let e=(t.x-this.camera.x)*i+this.width/2,h=(t.y-this.camera.y)*i+this.height/2;const s=t.r*i;this.context.beginPath(),this.context.arc(e,h,s,0,2*Math.PI),t.fill&&(this.context.fillStyle=t.fill,this.context.fill()),t.strokeWidth&&(this.context.strokeStyle=t.stroke,this.context.lineWidth=t.strokeWidth*i,this.context.stroke())},drawLine:function(t,i){const e=(t.x1-this.camera.x)*i+this.width/2,h=(t.y1-this.camera.y)*i+this.height/2,s=(t.x2-this.camera.x)*i+this.width/2,n=(t.y2-this.camera.y)*i+this.height/2;this.context.beginPath(),this.context.moveTo(e,h),this.context.lineTo(s,n),t.strokeWidth&&(this.context.strokeStyle=t.stroke,this.context.lineWidth=t.strokeWidth,this.context.stroke())},setWorld:function(t){this.world=t},setCamera:function(t){this.camera=t}};class World{constructor(t,i,e="white"){this.width=t,this.height=i,this.color=e,this.children=[]}makeRect(t,i,e,h){const s=new Rect(t,i,e,h);return this.children.push(s),s}makeCircle(t,i,e){const h=new Circle(t,i,e);return this.children.push(h),h}makeLine(t,i,e,h){const s=new Line(t,i,e,h);return this.children.push(s),s}}class Camera{constructor(t,i,e,h){this.x=t,this.y=i,this.maxWidth=e,this.maxHeight=h}}class Rect{constructor(t,i,e,h){this.x=t,this.y=i,this.width=e,this.height=h,this.fill="black",this.stroke="black",this.strokeWidth=0}setFill(t){this.fill=t}setStroke(t){this.stroke=t}setStrokeWidth(t){this.strokeWidth=t}}class Circle{constructor(t,i,e){this.x=t,this.y=i,this.r=e,this.fill="black",this.stroke="black",this.strokeWidth=0}setFill(t){this.fill=t}setStroke(t){this.stroke=t}setStrokeWidth(t){this.strokeWidth=t}}class Line{constructor(t,i,e,h){this.x1=t,this.y1=i,this.x2=e,this.y2=h,this.stroke="black",this.strokeWidth=1}setStroke(t){this.stroke=t}setStrokeWidth(t){this.strokeWidth=t}}
